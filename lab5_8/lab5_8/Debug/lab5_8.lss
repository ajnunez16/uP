
lab5_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00802000  0000048e  00000502  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000431d  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003c80  00000000  00000000  000049d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000665  00000000  00000000  00008655  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00008cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002d88  00000000  00000000  00008d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001af  00000000  00000000  0000bb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e8       	ldi	r30, 0x8E	; 142
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	ac 3f       	cpi	r26, 0xFC	; 252
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
 234:	0c 94 45 02 	jmp	0x48a	; 0x48a <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <usartd0_init>:
*          transmitter.
* Input(s): N/A
* Output: N/A
******************************************************************************/
void usartd0_init(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
  /* configure relevant TxD and RxD pins */
	PORTD.OUTSET = PIN3_bm;
 244:	80 e6       	ldi	r24, 0x60	; 96
 246:	96 e0       	ldi	r25, 0x06	; 6
 248:	28 e0       	ldi	r18, 0x08	; 8
 24a:	fc 01       	movw	r30, r24
 24c:	25 83       	std	Z+5, r18	; 0x05
	PORTD.DIRSET = PIN3_bm;
 24e:	80 e6       	ldi	r24, 0x60	; 96
 250:	96 e0       	ldi	r25, 0x06	; 6
 252:	28 e0       	ldi	r18, 0x08	; 8
 254:	fc 01       	movw	r30, r24
 256:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 258:	80 e6       	ldi	r24, 0x60	; 96
 25a:	96 e0       	ldi	r25, 0x06	; 6
 25c:	24 e0       	ldi	r18, 0x04	; 4
 25e:	fc 01       	movw	r30, r24
 260:	22 83       	std	Z+2, r18	; 0x02

  /* configure baud rate */
	/* At 2 MHz SYSclk, 5 BSEL, -6 BSCALE corresponds to 57600 bps */
	USARTD0.BAUDCTRLA = (uint8_t)75;
 262:	80 ea       	ldi	r24, 0xA0	; 160
 264:	99 e0       	ldi	r25, 0x09	; 9
 266:	2b e4       	ldi	r18, 0x4B	; 75
 268:	fc 01       	movw	r30, r24
 26a:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)( (-6 << 4) | (75 >> 8) );
 26c:	80 ea       	ldi	r24, 0xA0	; 160
 26e:	99 e0       	ldi	r25, 0x09	; 9
 270:	20 ea       	ldi	r18, 0xA0	; 160
 272:	fc 01       	movw	r30, r24
 274:	27 83       	std	Z+7, r18	; 0x07

  /* configure remainder of serial protocol */
  /* in this example, a protocol with 8 data bits, even parity, and
   * one stop bit is chosen. */
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc |
 276:	80 ea       	ldi	r24, 0xA0	; 160
 278:	99 e0       	ldi	r25, 0x09	; 9
 27a:	23 e2       	ldi	r18, 0x23	; 35
 27c:	fc 01       	movw	r30, r24
 27e:	25 83       	std	Z+5, r18	; 0x05
					        USART_PMODE_EVEN_gc		  |
					        USART_CHSIZE_8BIT_gc        &
                  ~USART_SBMODE_bm;

  /* enable receiver and/or transmitter systems */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 280:	80 ea       	ldi	r24, 0xA0	; 160
 282:	99 e0       	ldi	r25, 0x09	; 9
 284:	28 e1       	ldi	r18, 0x18	; 24
 286:	fc 01       	movw	r30, r24
 288:	24 83       	std	Z+4, r18	; 0x04

  /* enable interrupt (optional) */
	/* USARTD0.CTRLA = USART_RXCINTLVL_MED_gc; */
}
 28a:	00 00       	nop
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <usartd0_out_char>:
* Purpose: To output a character from the transmitter within USARTD0.
* Input(s): c (char)
* Output: N/A
******************************************************************************/
void usartd0_out_char(char c)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	1f 92       	push	r1
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	89 83       	std	Y+1, r24	; 0x01
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 29e:	00 00       	nop
 2a0:	80 ea       	ldi	r24, 0xA0	; 160
 2a2:	99 e0       	ldi	r25, 0x09	; 9
 2a4:	fc 01       	movw	r30, r24
 2a6:	81 81       	ldd	r24, Z+1	; 0x01
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	80 72       	andi	r24, 0x20	; 32
 2ae:	99 27       	eor	r25, r25
 2b0:	89 2b       	or	r24, r25
 2b2:	b1 f3       	breq	.-20     	; 0x2a0 <usartd0_out_char+0xe>
	USARTD0.DATA = c;
 2b4:	80 ea       	ldi	r24, 0xA0	; 160
 2b6:	99 e0       	ldi	r25, 0x09	; 9
 2b8:	29 81       	ldd	r18, Y+1	; 0x01
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
}
 2be:	00 00       	nop
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <usartd0_out_string>:
* Purpose: To output a C string from the transmitter within USARTD0.
* Input(s): str (char *)
* Output: N/A
******************************************************************************/
void usartd0_out_string(char * str)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	1f 92       	push	r1
 2ce:	1f 92       	push	r1
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	9a 83       	std	Y+2, r25	; 0x02
	while(*str) usartd0_out_char(*(str++));
 2d8:	0b c0       	rjmp	.+22     	; 0x2f0 <usartd0_out_string+0x28>
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	9a 81       	ldd	r25, Y+2	; 0x02
 2de:	9c 01       	movw	r18, r24
 2e0:	2f 5f       	subi	r18, 0xFF	; 255
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	29 83       	std	Y+1, r18	; 0x01
 2e6:	3a 83       	std	Y+2, r19	; 0x02
 2e8:	fc 01       	movw	r30, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	0e 94 49 01 	call	0x292	; 0x292 <usartd0_out_char>
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	fc 01       	movw	r30, r24
 2f6:	80 81       	ld	r24, Z
 2f8:	88 23       	and	r24, r24
 2fa:	79 f7       	brne	.-34     	; 0x2da <usartd0_out_string+0x12>
}
 2fc:	00 00       	nop
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <usartd0_in_char>:
* Purpose: To read in a character from the receiver within USARTD0.
* Input(s): N/A
* Output: (char)
******************************************************************************/
char usartd0_in_char(void)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
  while(!(USARTD0.STATUS & USART_RXCIF_bm));
 310:	00 00       	nop
 312:	80 ea       	ldi	r24, 0xA0	; 160
 314:	99 e0       	ldi	r25, 0x09	; 9
 316:	fc 01       	movw	r30, r24
 318:	81 81       	ldd	r24, Z+1	; 0x01
 31a:	88 23       	and	r24, r24
 31c:	d4 f7       	brge	.-12     	; 0x312 <usartd0_in_char+0xa>
  return USARTD0.DATA;
 31e:	80 ea       	ldi	r24, 0xA0	; 160
 320:	99 e0       	ldi	r25, 0x09	; 9
 322:	fc 01       	movw	r30, r24
 324:	80 81       	ld	r24, Z
}
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <usartd0_in_string>:
*          is to be stored within a pre-allocated buffer (buf).
* Input(s): buf (char *)
* Output: N/A
******************************************************************************/
void usartd0_in_string(char * buf)
{
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	00 d0       	rcall	.+0      	; 0x336 <usartd0_in_string+0xa>
 336:	1f 92       	push	r1
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	8b 83       	std	Y+3, r24	; 0x03
 33e:	9c 83       	std	Y+4, r25	; 0x04
  // read chars
  for(int i = 0; i < strlen(buf); i++){
 340:	19 82       	std	Y+1, r1	; 0x01
 342:	1a 82       	std	Y+2, r1	; 0x02
 344:	10 c0       	rjmp	.+32     	; 0x366 <usartd0_in_string+0x3a>
	  // store char returned by in char in char array buf
	  buf[i] = usartd0_in_char();
 346:	89 81       	ldd	r24, Y+1	; 0x01
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	2b 81       	ldd	r18, Y+3	; 0x03
 34c:	3c 81       	ldd	r19, Y+4	; 0x04
 34e:	89 01       	movw	r16, r18
 350:	08 0f       	add	r16, r24
 352:	19 1f       	adc	r17, r25
 354:	0e 94 84 01 	call	0x308	; 0x308 <usartd0_in_char>
 358:	f8 01       	movw	r30, r16
 35a:	80 83       	st	Z, r24
* Output: N/A
******************************************************************************/
void usartd0_in_string(char * buf)
{
  // read chars
  for(int i = 0; i < strlen(buf); i++){
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	9a 83       	std	Y+2, r25	; 0x02
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	9c 81       	ldd	r25, Y+4	; 0x04
 36a:	0e 94 3c 02 	call	0x478	; 0x478 <strlen>
 36e:	9c 01       	movw	r18, r24
 370:	89 81       	ldd	r24, Y+1	; 0x01
 372:	9a 81       	ldd	r25, Y+2	; 0x02
 374:	82 17       	cp	r24, r18
 376:	93 07       	cpc	r25, r19
 378:	30 f3       	brcs	.-52     	; 0x346 <usartd0_in_string+0x1a>
	  // store char returned by in char in char array buf
	  buf[i] = usartd0_in_char();
  }
}
 37a:	00 00       	nop
 37c:	24 96       	adiw	r28, 0x04	; 4
 37e:	cd bf       	out	0x3d, r28	; 61
 380:	de bf       	out	0x3e, r29	; 62
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <main>:

int main( void ){
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	60 97       	sbiw	r28, 0x10	; 16
 396:	cd bf       	out	0x3d, r28	; 61
 398:	de bf       	out	0x3e, r29	; 62
		// init usart
	usartd0_init();
 39a:	0e 94 1e 01 	call	0x23c	; 0x23c <usartd0_init>
	// output intro prompt
	usartd0_out_string("Welcome to the Memory GUI! This program allows a user to view as well as edit any data memory location within the connected ATxmega128A1U.");
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	90 e2       	ldi	r25, 0x20	; 32
 3a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usartd0_out_string>
	// loop forever
	while(1){
		usartd0_out_string("To read from a memory location, type 'R'. To write to a memory location, type 'W'. (R/W): ");
 3a6:	8b e8       	ldi	r24, 0x8B	; 139
 3a8:	90 e2       	ldi	r25, 0x20	; 32
 3aa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usartd0_out_string>
		volatile char c;
		// loop until R or W is entered
		while(c != 'R' && c != 'W'){
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <main+0x30>
			c = usartd0_in_char();	// get input char
 3b0:	0e 94 84 01 	call	0x308	; 0x308 <usartd0_in_char>
 3b4:	8a 87       	std	Y+10, r24	; 0x0a
			usartd0_out_char(c);	// allow user to see input
 3b6:	8a 85       	ldd	r24, Y+10	; 0x0a
 3b8:	0e 94 49 01 	call	0x292	; 0x292 <usartd0_out_char>
	// loop forever
	while(1){
		usartd0_out_string("To read from a memory location, type 'R'. To write to a memory location, type 'W'. (R/W): ");
		volatile char c;
		// loop until R or W is entered
		while(c != 'R' && c != 'W'){
 3bc:	8a 85       	ldd	r24, Y+10	; 0x0a
 3be:	82 35       	cpi	r24, 0x52	; 82
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <main+0x3c>
 3c2:	8a 85       	ldd	r24, Y+10	; 0x0a
 3c4:	87 35       	cpi	r24, 0x57	; 87
 3c6:	a1 f7       	brne	.-24     	; 0x3b0 <main+0x24>
			c = usartd0_in_char();	// get input char
			usartd0_out_char(c);	// allow user to see input
		}
		usartd0_out_string("Address: 0x");
 3c8:	86 ee       	ldi	r24, 0xE6	; 230
 3ca:	90 e2       	ldi	r25, 0x20	; 32
 3cc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usartd0_out_string>
		volatile char addr[4];
		// loop until addr is within range
		while(!(addr[0] == '0' && addr[0] == '1'&& addr[0] == '2'&& addr[0] == '3')){
 3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <main+0x56>
			usartd0_in_string(addr);	// get string input and store in addr
 3d2:	ce 01       	movw	r24, r28
 3d4:	0b 96       	adiw	r24, 0x0b	; 11
 3d6:	0e 94 96 01 	call	0x32c	; 0x32c <usartd0_in_string>
			usartd0_out_string(addr); // allow user to see input
 3da:	ce 01       	movw	r24, r28
 3dc:	0b 96       	adiw	r24, 0x0b	; 11
 3de:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usartd0_out_string>
			usartd0_out_char(c);	// allow user to see input
		}
		usartd0_out_string("Address: 0x");
		volatile char addr[4];
		// loop until addr is within range
		while(!(addr[0] == '0' && addr[0] == '1'&& addr[0] == '2'&& addr[0] == '3')){
 3e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e4:	80 33       	cpi	r24, 0x30	; 48
 3e6:	a9 f7       	brne	.-22     	; 0x3d2 <main+0x46>
 3e8:	8b 85       	ldd	r24, Y+11	; 0x0b
 3ea:	81 33       	cpi	r24, 0x31	; 49
 3ec:	91 f7       	brne	.-28     	; 0x3d2 <main+0x46>
 3ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 3f0:	82 33       	cpi	r24, 0x32	; 50
 3f2:	79 f7       	brne	.-34     	; 0x3d2 <main+0x46>
 3f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 3f6:	83 33       	cpi	r24, 0x33	; 51
 3f8:	61 f7       	brne	.-40     	; 0x3d2 <main+0x46>
			usartd0_in_string(addr);	// get string input and store in addr
			usartd0_out_string(addr); // allow user to see input
		}
		// if read selected
		if(c == 'R') {
 3fa:	8a 85       	ldd	r24, Y+10	; 0x0a
 3fc:	82 35       	cpi	r24, 0x52	; 82
 3fe:	a9 f4       	brne	.+42     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			// read from memory location
			__far_mem_read(addr);
 400:	ce 01       	movw	r24, r28
 402:	0b 96       	adiw	r24, 0x0b	; 11
 404:	09 2e       	mov	r0, r25
 406:	00 0c       	add	r0, r0
 408:	aa 0b       	sbc	r26, r26
 40a:	bb 0b       	sbc	r27, r27
 40c:	89 83       	std	Y+1, r24	; 0x01
 40e:	9a 83       	std	Y+2, r25	; 0x02
 410:	ab 83       	std	Y+3, r26	; 0x03
 412:	bc 83       	std	Y+4, r27	; 0x04
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	9a 81       	ldd	r25, Y+2	; 0x02
 418:	ab 81       	ldd	r26, Y+3	; 0x03
 41a:	bc 81       	ldd	r27, Y+4	; 0x04
 41c:	0b b6       	in	r0, 0x3b	; 59
 41e:	ab bf       	out	0x3b, r26	; 59
 420:	fc 01       	movw	r30, r24
 422:	80 81       	ld	r24, Z
 424:	0b be       	out	0x3b, r0	; 59
 426:	8d 83       	std	Y+5, r24	; 0x05
 428:	be cf       	rjmp	.-132    	; 0x3a6 <main+0x1a>
		}	// if write selected
		else if (c== 'W') {
 42a:	8a 85       	ldd	r24, Y+10	; 0x0a
 42c:	87 35       	cpi	r24, 0x57	; 87
 42e:	09 f0       	breq	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	ba cf       	rjmp	.-140    	; 0x3a6 <main+0x1a>
			usartd0_out_string("Data: 0x");
 432:	82 ef       	ldi	r24, 0xF2	; 242
 434:	90 e2       	ldi	r25, 0x20	; 32
 436:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usartd0_out_string>
			volatile char data[2];
			usartd0_in_string(data); // read in data string
 43a:	ce 01       	movw	r24, r28
 43c:	0f 96       	adiw	r24, 0x0f	; 15
 43e:	0e 94 96 01 	call	0x32c	; 0x32c <usartd0_in_string>
			usartd0_out_string(data);	// allow user to see input
 442:	ce 01       	movw	r24, r28
 444:	0f 96       	adiw	r24, 0x0f	; 15
 446:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usartd0_out_string>
			// write to memory location
			__far_mem_write(addr, data);
 44a:	ce 01       	movw	r24, r28
 44c:	0b 96       	adiw	r24, 0x0b	; 11
 44e:	09 2e       	mov	r0, r25
 450:	00 0c       	add	r0, r0
 452:	aa 0b       	sbc	r26, r26
 454:	bb 0b       	sbc	r27, r27
 456:	8e 83       	std	Y+6, r24	; 0x06
 458:	9f 83       	std	Y+7, r25	; 0x07
 45a:	a8 87       	std	Y+8, r26	; 0x08
 45c:	b9 87       	std	Y+9, r27	; 0x09
 45e:	ce 01       	movw	r24, r28
 460:	0f 96       	adiw	r24, 0x0f	; 15
 462:	28 2f       	mov	r18, r24
 464:	8e 81       	ldd	r24, Y+6	; 0x06
 466:	9f 81       	ldd	r25, Y+7	; 0x07
 468:	a8 85       	ldd	r26, Y+8	; 0x08
 46a:	b9 85       	ldd	r27, Y+9	; 0x09
 46c:	0b b6       	in	r0, 0x3b	; 59
 46e:	ab bf       	out	0x3b, r26	; 59
 470:	fc 01       	movw	r30, r24
 472:	20 83       	st	Z, r18
 474:	0b be       	out	0x3b, r0	; 59
		}
	}
 476:	97 cf       	rjmp	.-210    	; 0x3a6 <main+0x1a>

00000478 <strlen>:
 478:	fc 01       	movw	r30, r24
 47a:	01 90       	ld	r0, Z+
 47c:	00 20       	and	r0, r0
 47e:	e9 f7       	brne	.-6      	; 0x47a <strlen+0x2>
 480:	80 95       	com	r24
 482:	90 95       	com	r25
 484:	8e 0f       	add	r24, r30
 486:	9f 1f       	adc	r25, r31
 488:	08 95       	ret

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
